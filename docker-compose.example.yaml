version: "3"

services:
  # jellyfin is used to serve your media to the client devices
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    #network_mode: host # plex
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
      - VERSION=docker
    volumes:
      - <media_folder>/movies:/data/movies
      - <media_folder>/tvshows:/data/tvshows
      - <install_location>/config/jellyfin:/config
    ports:
      - 8096:8096
    restart: unless-stopped

  # qBitorrent is used to download torrents
  qbittorrent:
    image: cr.hotio.dev/hotio/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
      - WEB_UI_PORT=8080
    volumes:
      - <media_folder>/downloads:/downloads
      - <install_location>/config/qbittorrent:/config
    restart: unless-stopped
    ports: # qbittorrent
      - 8080:8080 # qbittorrent

  # Sonarr is used to query, add downloads to the download queue and index TV shows
  # https://sonarr.tv/
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
    volumes:
      - <media_folder>/tvshows:/tv
      - <media_folder>/downloads:/downloads
      - <install_location>/config/sonarr:/config
    ports:
      - 8989:8989
    restart: unless-stopped

  # Radarr is used to query, add downloads to the download queue and index Movies
  # https://radarr.video/
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
    volumes:
      - <media_folder>/movies:/movies
      - <media_folder>/downloads:/downloads
      - <install_location>/config/radarr:/config
    ports:
      - 7878:7878
    restart: unless-stopped

  # Lidarr is used to query, add downloads to the download queue and index Music
  # https://lidarr.audio/
  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
    volumes:
      - <media_folder>/music:/music
      - <media_folder>/downloads:/downloads
      - <install_location>/config/lidarr:/config
    ports:
      - 8686:8686
    restart: unless-stopped

  # Readarr is used to query, add downloads to the download queue and index Audio and Ebooks
  # https://readarr.com/
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
    volumes:
      - <media_folder>/books:/books
      - <media_folder>/downloads:/downloads
      - <install_location>/config/readarr:/config
    ports:
      - 8787:8787
    restart: unless-stopped

  # Bazarr is used to download and categorize subtitles
  # https://www.bazarr.media/
  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
    volumes:
      - <media_folder>/movies:/movies
      - <media_folder>/tvshows:/tv
      - <install_location>/config/bazarr:/config
    ports:
      - 6767:6767
    restart: unless-stopped

  # Prowlarr is our torrent indexer/searcher. Sonarr/Radarr use Prowlarr as a source
  # https://prowlarr.com/
  prowlarr:
    image: lscr.io/linuxserver/prowlarr
    container_name: prowlarr
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
    volumes:
      - <install_location>/config/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  # double commander is our filebrowser
  doublecommander:
    image: ghcr.io/linuxserver/doublecommander
    container_name: doublecommander
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
    volumes:
      - <install_location>/config/doublecommander:/config
      - <media_folder>:/data
    ports:
      - 3000:3000
    restart: unless-stopped

  # Kavita serves the books and comics 
  kavita:
    image: kizaing/kavita:latest
    environment:
      - PUID=<your_PUID>
      - PGID=<your_PGID>
    volumes:
      - <install_location>/config/kavita:/kavita/config
      - <media_folder>/books:/manga
    ports:
      - "5500:5000"
    restart: unless-stopped

  # navidrome serves the music 
  navidrome:
    image: deluan/navidrome:latest
    ports:
      - 4533:4533
    environment:
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info  
      ND_BASEURL: ""
    volumes:
      - <install_location>/config/navidrome:/data
      - <media_folder>/music:/music:ro
    restart: unless-stopped

  # Minio is the document storage similar to AWS S3
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9099:9099"
    environment:
      MINIO_ROOT_USER: <minio_user>
      MINIO_ROOT_PASSWORD: <minio_password>
    volumes:
      - <media_folder>/minio/data:/data
    command: server --address ":9099" --console-address ":9000" /data
    restart: unless-stopped

  # Portainer helps debugging and monitors the containers
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - 9000:9000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - <install_location>/config/portainer:/data
    restart: unless-stopped

  # Watchtower is going to keep our instances updated
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped


